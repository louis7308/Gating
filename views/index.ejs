<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>G개팅</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstarp.min.js"></script>

    <style>
        body{
            background-color: rgb(245, 183, 224);
            padding-top: 50px;
        }
        
        .chatDisabled{
            display:none;
        }
        .chatabled{
            display: block;
        }
        .jumbotron {
            background-color: rgb(245, 183, 224);
            border: white 4px solid;
        }
        .form-group {
            text-align: center;
            border: white 4px solid;
            padding: 10px;
            
        }
    </style>
    <!-- socket js-->
</head>
<body>
    <div class="container">
        <div class="jumbotron">
            <h1>G-개팅</h1>
            <p>
                랜덤 익명 소개팅 앱 G-개팅에 오신 것을 진심으로<br>
                환영합니다! <br>
                저희 G-개팅은 사용자 모두 익명의 닉네임을<br>
                사용하여 마음 편히 상대방과 채팅을 즐길 수 있는<br>
                앱입니다.<br>
                규칙<br>
                1. 상대방에게 욕설 금지<br>
                2. 상대방의 이름을 묻지 않기
            </p>
        </div>
    </div>
    <div class="container" style="margin-top: 20px;" id="nickNameForm">
        <div class="form-group form-inline">
            <input type="text" name="nickname" class="form-control" maxlength="100" id="nickname" placeholder="닉네임을 입력하세요..">
            <button class="btn btn-primary" id="nicknameBtn">확인</button>
        </div>
    </div>
    <div class="container chatDisabled" id="chatBox">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h1 class="panel-title">채팅창<span class="pull-right">접속자 : <span class="clientsCount"></span>명</span></h1>
            </div>
            <div class="panel-body">
                <ul class="chat list-unstyled" id="chat" style="height: 500px; overflow: auto;">
                </ul>
            </div>
            <div class="panel-footer">
                <div class="row">
                    <div class="col-xs-9">
                        <input type="text" class="form-control" id="content" name="content" onkeyup="enterkey()" placeholder="대화내용을 입력하세요.." maxlength="3000">
                    </div>
                    <div class="col-xs-3">
                        <button class="btn btn-primary" id="sendMessage">보내기</button>
                        <button class="btn btn-danger" id="closing">나가기</button>
                        <button class="btn btn-warning" id="ramdomChatFindBtn">랜덤채팅시작</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var nickName = "";
        var roomName = "";
        var handle = null;
        var socket = io.connect(); //웹소켓서버에 연결한다.

        const sendMessageFunc = () => {
            let content = $("#content").val();
            console.log(content);
            if(!content) {
                alert("대화내용을 입력해주세요");
                return ;
            }

            let str = "";
            str += "<li>";
            str += "<strong>" + nickName + "</strong>";
            str += "<p>" + content + "</p>";
            str += "<hr>";
            str += "</li>";

            socket.emit("message", {roomName : roomName, data : str});
            $("#content").val("");
            $("#chat").scrollTop($("#chat")[0].scrollHeight);
        }

        $("#nicknameBtn").on("click",function(){
            var nicknameValue = $("input[name='nickname']").val();
            nickName = nicknameValue;
            socket.emit("nickNameCheck",{name:nicknameValue});
        });
        socket.on("nullError",function(result){
            alert(result);
        });
        socket.on("sameNameError",function(result){
            alert(result);
        });
        socket.on("nickNameCheckComplete",function(){
            $("#chatBox").removeClass("chatDisabled").addClass("chatabled");
            $("#nickNameForm").css("display","none");
            $("#sendMessage").hide(); $("#closing").hide();
            $("#ramdomChatFindBtn").show();
            $("#content").hide();
            clientCounting();
        });

        
        $("#ramdomChatFindBtn").on("click",function(){
            $("#chat").html("");
            socket.emit("randomChatFindClick",{name:nickName});
        })
        socket.on("randomChatFindClickComplete",function(){
            $("#chat").html("").append("<li>대화상대를 찾고있습니다...</li>");
            startFinding(); //실제로 대화상대찾기 시작
        });
        socket.on("randomChatFiningComplete",function(data){
            stopFinding(); //찾는걸 성공했으니 찾는걸 멈춰야댐.
            $("#chat").html("").append("<li><p>대화방에 입장했습니다!!</p><hr></li>");
            $("#sendMessage").show(); $("#closing").show();
            $("#ramdomChatFindBtn").hide();
            $("#content").show();
            roomName = data;
        });

        socket.on("clientsCount",function(data){
            $(".clientsCount").html(data);
        })


        function startFinding(){
            if(handle == null){
                handle = setInterval(function(){
                    console.log(name.nickname);
                    socket.emit("randomChatFining",{name:nickName});
                },500);
            }
        }

        function stopFinding(){
            clearInterval(handle);
            handle = null;
        }
        $("#sendMessage").on("click", sendMessageFunc)
        
        socket.on("message", (data) => {
            $("#chat").append(data);
        })

        $("#closing").on("click", () => {
            socket.emit("chatClosingBtn", {roomName: roomName});
        })

        socket.on("chatEnd", (data) => {
            $("#chat").append("<li><p>대화방이 종료되었습니다</p></li>");
            $("#sendMessage").hide();
            $("#closing").hide();
            $("#ramdomChatFindBtn").show();
            socket.emit("ChatClosing", {roomName: roomName});
        })

        socket.on("discWhileChat", () => {
            socket.emit("chatClosingBtn", {roomName: roomName});
        })

        function clientCounting() {
            setInterval(() => {
                socket.emit("clientsCount")
            }, 1500)
        }
        const enterkey = () => {
            console.log(window.event.keyCode);
            if(window.event.keyCode == 13) {
                sendMessageFunc();
            }
        }
    </script>
</body>
</html>